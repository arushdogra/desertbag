<!DOCTYPE html>
<html>
<head>
    <title>DESERT BAG - Satellite Map</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-auth-compat.js"></script>
    <style>
        :root {
            --desert-brown: #8B4513;
            --sunset-orange: #E67E22;
            --off-white: #FFF9F0;
            --soft-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        body {
            background-image: url('https://i0.wp.com/travelwithme247blog.com/wp-content/uploads/2024/01/funky-desert-captions.jpg?resize=940%2C788&ssl=1');
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-position: center;
            margin: 0;
            font-family: 'Poppins', sans-serif;
            color: #333;
            min-height: 100vh;
        }
        nav {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(5px);
            padding: 1rem 5%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--soft-shadow);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 700;
            font-size: 1.2rem;
            color: var(--desert-brown);
        }

        .logo img {
            border-radius: 50%;
        }

        .nav-links {
            display: flex;
            gap: 1.5rem;
            align-items: center;
        }

        .nav-links a {
            text-decoration: none;
            color: var(--desert-brown);
            font-weight: 600;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

        .nav-links a:hover {
            background: rgba(230, 126, 34, 0.1);
            color: var(--sunset-orange);
        }

        .nav-links a.active {
            background: rgba(230, 126, 34, 0.2);
        }

        .main-content {
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .card {
            background: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(8px);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: var(--soft-shadow);
            margin-bottom: 2rem;
            animation: fadeIn 1s ease;
        }

        #map-container {
            height: 600px;
            width: 100%;
            border-radius: 10px;
            overflow: hidden;
            margin-top: 1rem;
            box-shadow: var(--soft-shadow);
        }

        .controls-panel {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .control-group {
            background: rgba(255, 255, 255, 0.8);
            padding: 1rem;
            border-radius: 8px;
            box-shadow: var(--soft-shadow);
        }

        button, input, select {
            padding: 0.5rem 1rem;
            border-radius: 5px;
            border: 1px solid #ddd;
            font-family: 'Poppins', sans-serif;
            margin: 0.3rem 0;
        }

        button {
            background-color: var(--sunset-orange);
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: var(--desert-brown);
        }

        .distance-display {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--desert-brown);
            margin-top: 1rem;
            padding: 0.5rem;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 5px;
            display: inline-block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @media (max-width: 768px) {
            .nav-links {
                gap: 0.5rem;
            }
            
            #map-container {
                height: 400px;
            }
            
            .controls-panel {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <nav>
        <div class="logo">
            <img src="C:\Hackthon proj\DESERT BAG.jpg" height="40px" width="40px"> 
            <span>Desert Bag</span>
        </div>
        <div class="nav-links">
            <a href="desertbag.html" class="nav-link">HOME</a>
            <a href="weather.html" class="nav-link">WEATHER</a>
            <a href="survival.html" class="nav-link">SURVIVAL GUIDE</a>
            <a href="packing.html" class="nav-link">PACKING LIST</a>
            <a id="logoutBtn" style="display:none;" href="#logout">LOGOUT</a>
            <a href="resource.html" class="nav-link">RESOURCE</a>
            <a href="signinn.html" class="nav-link">SIGN IN</a>
            <a href="map.html" class="nav-link active"> MAP </a>
        </div>
    </nav>

    <main class="main-content">
        <div class="card">
            <h1>Desert Satellite Map</h1>
            <p>Explore desert regions with our interactive satellite map. Measure distances between points to plan your journey.</p>
            
            <div class="controls-panel">
                <div class="control-group">
                    <h3>Map Controls</h3>
                    <button id="measureBtn">Measure Distance</button>
                    <button id="clearBtn">Clear Measurements</button>
                </div>
                
                <div class="control-group">
                    <h3>Map Type</h3>
                    <select id="mapType">
                        <option value="satellite">Satellite</option>
                        <option value="hybrid">Hybrid</option>
                        <option value="terrain">Terrain</option>
                    </select>
                </div>
                
                <div class="control-group">
                    <h3>Distance</h3>
                    <div id="distanceResult" class="distance-display">Click two points to measure</div>
                </div>
            </div>
            
            <div id="map-container"></div>
        </div>
    </main>

    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-measure@3.1.0/dist/leaflet-measure.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet-measure@3.1.0/dist/leaflet-measure.css" />

    <script>
        const firebaseConfig = {
            apiKey: "AIzaSyCYIO-vW9w-ichkoBaCU-Z7MCb8ZCjan1M",
            authDomain: "desert-bag.firebaseapp.com",
            projectId: "desert-bag",
            storageBucket: "desert-bag.appspot.com",
            messagingSenderId: "1066086983620",
            appId: "1:1066086983620:web:9ebe4280cb754d64232691",
            measurementId: "G-MGTLKYY36K"
        };

        const app = firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();

        const logoutBtn = document.getElementById('logoutBtn');
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';

        document.querySelectorAll('.nav-link').forEach(link => {
            if (link.getAttribute('href') === currentPage) {
                link.classList.add('active');
            } else {
                link.classList.remove('active');
            }
        });

        auth.onAuthStateChanged(user => {
            if (user) {
                logoutBtn.style.display = 'block';
                console.log("Logged in as:", user.email);
            } else {
                logoutBtn.style.display = 'none';
            }
        });

        logoutBtn.addEventListener('click', (e) => {
            e.preventDefault();
            auth.signOut()
                .then(() => {
                    alert("Logged out successfully!");
                });
        });

        const map = L.map('map-container').setView([23.8859, 45.0792], 5);
        
        
        const satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
        });

        const terrainLayer = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
        });

        const baseLayers = {
            "Satellite": satelliteLayer,
            "Hybrid": L.tileLayer('https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}', {
                subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
                attribution: 'Google Maps'
            }),
            "Terrain": terrainLayer
        };

        satelliteLayer.addTo(map);
        
        document.getElementById('mapType').addEventListener('change', function() {
            const selectedLayer = this.value;

            map.eachLayer(layer => {
                map.removeLayer(layer);
            });

            if (selectedLayer === 'satellite') {
                satelliteLayer.addTo(map);
            } else if (selectedLayer === 'hybrid') {
                baseLayers["Hybrid"].addTo(map);
            } else if (selectedLayer === 'terrain') {
                terrainLayer.addTo(map);
            }

            if (window.measureControl) {
                window.measureControl.addTo(map);
            }
        });

        let measureControl;
        const measureBtn = document.getElementById('measureBtn');
        const clearBtn = document.getElementById('clearBtn');
        const distanceResult = document.getElementById('distanceResult');
        
        measureBtn.addEventListener('click', function() {
            if (window.measureControl) {
                window.measureControl.remove();
                delete window.measureControl;
                measureBtn.textContent = 'Measure Distance';
                distanceResult.textContent = 'Click two points to measure';
            } else {
                window.measureControl = new L.Control.Measure({
                    position: 'topright',
                    primaryLengthUnit: 'kilometers',
                    secondaryLengthUnit: 'miles',
                    primaryAreaUnit: 'hectares',
                    activeColor: '#E67E22',
                    completedColor: '#8B4513'
                });
                
                window.measureControl.addTo(map);
                measureBtn.textContent = 'Cancel Measurement';

                map.on('measurefinish', function(e) {
                    if (e.unit === 'kilometers') {
                        distanceResult.textContent = `Distance: ${e.measurement.toFixed(2)} km`;
                    } else if (e.unit === 'miles') {
                        distanceResult.textContent = `Distance: ${e.measurement.toFixed(2)} miles`;
                    }
                });
            }
        });
        
        clearBtn.addEventListener('click', function() {
            if (window.measureControl) {
                window.measureControl._clearMeasurements();
                distanceResult.textContent = 'Click two points to measure';
            }
        });

        const deserts = [
            { name: "Sahara Desert", coords: [23.4162, 25.6628] },
            { name: "Arabian Desert", coords: [23.8859, 45.0792] },
            { name: "Gobi Desert", coords: [42.7952, 105.0324] },
            { name: "Kalahari Desert", coords: [-23.4425, 21.9144] },
            { name: "Great Victoria Desert", coords: [-29.1500, 129.3500] },
            { name: "Sonoran Desert", coords: [32.2500, -113.7500] }
        ];
        
        deserts.forEach(desert => {
            L.marker(desert.coords).addTo(map)
                .bindPopup(`<b>${desert.name}</b>`)
                .openPopup();
        });
    </script>
</body>
</html>
